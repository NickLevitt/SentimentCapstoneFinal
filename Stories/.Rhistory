library(shiny)
setwd("~/Desktop/Projects/Work_Unpak/unpak-shiny")
runApp('findline.update/')
library(dplyr)
runApp('findline.update/')
?spline
3 mod 17
mod(17,3)
mod?
??mod
17 // 3
17 %% 3
3 %% 17
y = 3 + .2x
plot()
curve(3 + .2x)
curve(3 + .2*x)
curve(3 + .2*x, xlab = 'distance',ylab = 'missed')
curve(345.6 + .082x - .000147(x^2), xlab = 'distance',ylab = 'missed')
curve(345.6 + .082x - .000147(x^2), xlab = 'distance',ylab = 'missed')
x^2
curve(345.6 + .082x - .000147(x*2), xlab = 'distance',ylab = 'missed')
curve(345.6 + .082x - .000147(x*x))
curve(345.6 + .082*x - .000147(x*x))
curve(345.6+0.082*x-.000147(x*x))
curve(x + x*x)
curve(345.6 + .082*x - .000147*(x*x))
curve(345.6 + .082*x - .000147*(x*x), from=1, to = 500)
max(345.6+0.082*x-.000147(x*x))
max(45.6+0.082*x-.000147(x*x))
curve(45.6 + .082*x - .000147*(x*x), from=1, to = 500)
install.packages("devtools")
ibrary(devtools)
install_github("bmschmidt/wordVectors")
library(devtools)
install_github("bmschmidt/wordVectors")
library(devtools)
install_github("bmschmidt/wordVectors")
if (!file.exists("cookbooks.zip")) {
download.file("http://archive.lib.msu.edu/dinfo/feedingamerica/cookbook_text.zip","cookbooks.zip")
}
unzip("cookbooks.zip",exdir="cookbooks")
library(wordVectors)
prep_word2vec("cookbooks","cookbooks.txt",lowercase=T)
model = train_word2vec("cookbooks.txt",output="cookbooks.vectors",threads = 3,vectors = 100,window=12)
nearest_to(model,model[["fish"]])
nearest_to(model,model[["meat"]])
nearest_to(model,model[[c("fish","salmon","trout","shad","flounder","carp","roe","eels")]],50)
nearest_to(model,model[[nearest_to(model,model[["meat"]])
]],50)
some_fish = nearest_to(model,model[[c("fish","salmon","trout","shad","flounder","carp","roe","eels")]],50)
some_fish
plot(filter_to_rownames(model,names(some_fish)))
install.packages("tsne")
plot(filter_to_rownames(model,names(some_fish)))
plot(model)
nearest_to(model,model[["spice"]])
nearest_to(model,model[["ice"]])
nearest_to(model,model[["blue"]])
vector_set[rownames(vector_set)=="king",] - vector_set[rownames(vector_set)=="man",] + vector_set[rownames(vector_set)=="woman",]
?read.vectors
?vector_set
install.packages('VectorSpaceModel')
?word2vec
?wordVectors
library(wordVectors)
nearest_to(model,model[["color"]])
nearest_to(model,model[["emotion"]])
nearest_to(model,model[["happy"]])
nearest_to(model,model[["happy"]], 100)
library(devtools)
?cookbooks
unzip("cookbooks.zip",exdir="cookbooks")
setwd("~/Desktop/School/Senior/Spring/Capstone/Stories")
library(wordVectors)
prep_word2vec("pride","PrideAndPrejudice.txt",lowercase=T)
read.table('PrideAndPrejudice.txt')
prep_word2vec("pride","PrideAndPrejudice.txt",lowercase=T)
> unzip("cookbooks.zip",exdir="cookbooks")
unzip("cookbooks.zip",exdir="cookbooks")
if (!file.exists("cookbooks.zip")) {
download.file("http://archive.lib.msu.edu/dinfo/feedingamerica/cookbook_text.zip","cookbooks.zip")
}
unzip("cookbooks.zip",exdir="cookbooks")
prep_word2vec("allStories","allStories.txt",lowercase=T)
model = train_word2vec("allStories.txt",output="stories.vectors",threads = 3,vectors = 100,window=12)
nearest_to(model,model[["happy"]])
nearest_to(model,model[["happy"]], 100)
nearest_to(model,model[["sad"]], 100)
xxx = nearest_to(model,model[["sad"]], 100)
xxx[1]
xxx[1,1]
xxx[1][1]
sort(xxx)
xxx = nearest_to(model,model[["happy"]], 100)
yyy = nearest_to(model,model[["sad"]], 100)
yyy
xxx
sort(xxx)
version
